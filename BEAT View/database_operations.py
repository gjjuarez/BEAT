#! /usr/bin/env python3

# database_operations.py version 1.1
import pymongo
from bson import ObjectId

# Data will be stored in the following format on the mongo Database
# database = project selected
# collection = the POI selected (String, struct, etc.)
# document = data related to the POI (type, size, etc.)

# connect to database on a local machine
connection = pymongo.MongoClient('localhost',27017)

# create database
current_database = 'BEAT_Database' # change string ('temp') here to make a new database for each project***
database = connection[current_database]

# create a collection for each point of interest
point_of_interest = 'POIs' # change string ('placeholder') here to make a new collection for each point of interest***
collection = database[point_of_interest]
#print("Database connected") #test line to check for proper connection

# begin methods for adding, updating/creating, getting, and removal of data from collections
def insert_data(data): #data needs to be in json format
   document = collection.insert_one(data)
   return document.inserted_id

def update_or_create(document_id,data):
    #avoids duplicates by by creating a new document if the same id does not exist
    document = collection.delete_one({'_id': ObjectId(document_id)},{"$set": data},upsert=True)
    return document.acknowledged

def update_existing(document_id,data):
    document = collection.delete_one({'_id': ObjectId(document_id)}, {"$set": data})
    return document.acknowledged

def remove_data(document_id):
    document = collection.delete_one({'_id': ObjectId(document_id)})
    return document.acknowledged #returns true if deleted

# select a single piece of data to return from a collection(point of interest)
def get_single_data(document_id):
    data = collection.find_one({'_id': ObjectId(document_id)})
    return data

# return everything from a collection(points of interest) in a list format
def get_multiple_data():
    data = collection.find()
    return list(data)

# close the connection to the database
connection.close()

# start of main

# useful notes on database operations:
# data = {"_id": "Project 01","Name", "HP"} #how to define a user defined id *can't use the same id twice!*
# id = insert_data(data) #this will return the id auto generated by mongoDB

# used to change the type of data entered into the database via the if/else statements below
poi_type = "variable" # change "variable" to variable, string, library, function, packet, or struct depding on the type
                      # of data to be entered into the database *note struct not yet implemented*

# edit the following variables with what was found in the static or dynamic analysis
# values that can be stored by the mongo Database are string, integer, boolean, double, Min/Max keys, arrays, timestamp,
# Object, Null, Symbol, Date, ObjectId, Binary data, javascript code and regular expressions
POI_object_ID = "" #when object  Id is made grab it and store it as well? or into another DB?
POI_name = "POI_Temp"
POI_value = 3
POI_data_type = "variable"
POI_size = 2
POI_call_address = ""
POI_destination_address = ""
POI_parameter_type = ""
POI_parameter_order = ""
POI_parameter_value = ""
POI_member_type = ""
POI_member_order = ""
POI_member_value = ""
POI_return_type = ""
POI_return_value = ""
POI_binary_section = ""
POI_section_Size = 0
POI_section_value = ""
POI_structure = ""
POI_order_to_functions = ""


# if/else statements to store the corresponding data tot he database
if poi_type == "variable": #variable
    document = collection.insert_many([{
                'Variable Name': POI_name,
                'Variable Value': POI_value,
                'Variable Type': POI_data_type,
                'Variable Size': POI_size,
                'Bianry Section': POI_binary_section,
                'Call From Address': POI_call_address}])

elif poi_type == "string": #string
    document = collection.insert_many([{
                'String Name': POI_name,
                'String Value': POI_value,
                'String Type': POI_data_type,
                'String Size': POI_size,
                'Call From Address': POI_call_address,
                'Destination Address': POI_destination_address,
                'Section': POI_binary_section}])

elif poi_type == "library": #library
    document = collection.insert_many([{
                'Library Name': POI_name,
                'Parameter Order': POI_parameter_order,
                'Parameter Type': POI_parameter_type,
                'Parameter Value': POI_parameter_value,
                'Return Type': POI_return_type,
                'Return Value': POI_return_value,
                'Call From Address': POI_order_to_functions}])

elif poi_type == "function": #function
    document = collection.insert_many([{
                'Function Name': POI_name,
                'Function Value': POI_value,
                'Return Type': POI_return_type,
                'Return Value': POI_return_value,
                'Call From Address': POI_call_address,
                'Destination Address': POI_destination_address,
                'Binary Section': POI_binary_section}])

elif poi_type == "protocol": #pakect protocol
    document = collection.insert_many([{
                'Protocol Name': POI_name,
                'Call From Address': POI_call_address,
                'Structure': POI_structure,
                'Section Size': POI_section_Size,
                'Section Value': POI_section_value,
                'Binary Section': POI_binary_section}])

elif poi_type == "struct": #struct
    document = collection.insert_many([{
                'Struct Name': POI_name,
                'Call From Address': POI_call_address,
                'Structure': POI_structure,
                'Member Order': POI_member_order,
                'Member Type': POI_member_type,
                'Member Value': POI_member_value,
                'Binary Section': POI_binary_section}])